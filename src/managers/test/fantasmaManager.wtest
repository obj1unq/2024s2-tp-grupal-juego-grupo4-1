import estados.estado.*
import managers.fantasmaManager.*
import managers.heladoManager.*
import managers.levelManager.*
import escenarios.levels.levelPrueba.*
import personajes.pacman.*
import src.managers.menuManager.*
import src.estados.estadosGame.*

import managers.posiciones.*
import escenarios.mapas.mapaDePrueba.*

describe "Fantasma Manager" {
    

    method initialize(){
        levelManager.levelActual(levelPrueba)
        game.addVisual(inicio)
        menuManager.pressEnter()
    }
    test "Fantasma y pacman asesinandolos" {
        const helado = heladoManager.heladoEn(game.at(2,2))
        const fantasma = fantasmaManager.fantasmasEn(game.at(1,2)).get(0)
        pacman.moverse()
        helado.colisionarConPacman()
        assert.equals(superPacman, pacman.estado())
        pacman.direccion(izquierda)
        pacman.moverse()
        fantasma.colisionarConPacman()
        assert.notThat(game.allVisuals().contains(fantasma))
        //llama al metodo del schedule
        fantasmaManager.revivirFantasma(fantasma)
        assert.that(game.allVisuals().contains(fantasma))
    }

    test "Fantasma intenta revivir"{
        fantasmaManager.clearPuntosDeReaparicion()
        const helado = heladoManager.heladoEn(game.at(2,2))
        const fantasma = fantasmaManager.fantasmasEn(game.at(1,2)).get(0)
        pacman.moverse()
        helado.colisionarConPacman()
        assert.equals(superPacman, pacman.estado())
        pacman.direccion(izquierda)
        pacman.moverse()
        fantasma.colisionarConPacman()
        assert.notThat(game.allVisuals().contains(fantasma))
        assert.throwsException({fantasmaManager.revivirFantasma(fantasma)})
    }

    test "Manager realiza clear y las listas quedan vacias"{
        assert.that(fantasmaManager.hayFantasmasYPuntosDeReaparicion())
        fantasmaManager.clearLevel()
        assert.notThat(fantasmaManager.hayFantasmasYPuntosDeReaparicion())
    }
}